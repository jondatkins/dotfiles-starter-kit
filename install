#!/usr/bin/env bash
LOG="${HOME}/dotfiles.log"
GITHUB_USER="jonkinz"
GITHUB_REPO="dotfiles-starter-kit"
USER_GIT_AUTHOR_NAME="jonkinz"
USER_GIT_AUTHOR_EMAIL="122027005+jonkinz@users.noreply.github.com"

DOTFILES_DIR="${HOME}/${GITHUB_REPO}"
CONFIG_DIR="${HOME}/.config"

download=false
link=false
unlink=false
install=false
runall=true

while getopts dlui flag
do
    case "${flag}" in
        d) 
          download=true
          runall=false
        ;;
        l)
          link=true
          runall=false
        ;;
        u)
          unlink=true
          runall=false
        ;;
        i) 
          install=true
          runall=false
        ;;
    esac
done

_process() {
	echo "$(date) PROCESSING:  $@" >>$LOG
	printf "$(tput setaf 6) %s...$(tput sgr0)\n" "$@"
}

_success() {
	local message=$1
	printf "%s✓ Success:%s\n" "$(tput setaf 2)" "$(tput sgr0) $message"
}

download_dotfiles() {
	_process "→ Creating directory at ${DOTFILES_DIR} and setting permissions"
	mkdir -p "${DOTFILES_DIR}"

	_process "→ Downloading repository to /tmp directory"
	curl -#fLo /tmp/${GITHUB_REPO}.tar.gz "https://github.com/${GITHUB_USER}/${GITHUB_REPO}/tarball/main"

	_process "→ Extracting files to ${DOTFILES_DIR}"
	tar -zxf /tmp/${GITHUB_REPO}.tar.gz --strip-components 1 -C "${DOTFILES_DIR}"

	_process "→ Removing tarball from /tmp directory"
	rm -rf /tmp/${GITHUB_REPO}.tar.gz

	[[ $? ]] && _success "${DOTFILES_DIR} created, repository downloaded and extracted"

	# Change to the dotfiles directory
	cd "${DOTFILES_DIR}"
}

download_dotfiles_with_git() {
  # Don't download if dotfiles dir is already installed.
  if [ -d "$DOTFILES_DIR" ]; then
    _process "→ $DOTFILES_DIR already downloaded"
    return
  fi
  _process "→ Installing git if needed"
  if ! command -v git &> /dev/null
  then
    _process "→ Installing git"
    sudo pacman -S --needed --noconfirm git
  else
    _process "→ git is already installed"
  fi
  cd ${HOME}
  rm -rf ${DOTFILES_DIR}
	_process "→ cloing dotfiles repo from:"
	_process "→ https://github.com/${GITHUB_USER}/${GITHUB_REPO}"
  git clone "https://github.com/${GITHUB_USER}/${GITHUB_REPO}" ${DOTFILES_DIR}
 
	[[ $? ]] && _success "${DOTFILES_DIR} created, repository cloned"
	# Change to the dotfiles directory
	cd "${DOTFILES_DIR}"
}

# Takes a boolean arg. If true, link the files, if false, unlink them.
link_dotfiles() {
  # Create config dir here if it doesn't already exist
  if [ ! -d $CONFIG_DIR ]; then
    _process "→ $CONFIG_DIR "
    mkdir $CONFIG_DIR
    return
  fi
	# symlink files to the HOME directory.
	if ! [[ -f "${DOTFILES_DIR}/opt/files" ]]
  then
    echo "no config file ${DOTFILES_DIR}/opt/files"
  else
    # if [ $1 = false ]
    # then
    # _process "→ Unlinking dotfiles in /configs"
    # else
    # _process "→ Symlinking dotfiles in /configs"
    # fi
		# Set variable for list of files
		files="${DOTFILES_DIR}/opt/files"
		# Store IFS separator within a temp variable
		OIFS=$IFS
		# Set the separator to a carriage return & a new line break
		# read in passed-in file and store as an array
		IFS=$'\r\n'
		links=($(cat "${files}"))
		# Loop through array of files
		for index in ${!links[*]}; do
			for link in ${links[$index]}; do
				# set IFS back to space to split string on
				IFS=$' '
				# create an array of line items
				file=(${links[$index]})
        configFilePath=${file[0]}
        symLinkFilePath=${file[1]}
        if  [ ! $configFilePath ] || [ ! $symLinkFilePath ]
        then
          process "→ link script expects 'files' data in the form:"
          process "→ path/to/config path/to/symlink"
          process "→ Your config is:"
          process "→ ${configFilePath} ${symLinkFilePath}"
          return
        fi
        if [ "$1" = false ]
        then
          if [ -f ${symLinkFilePath} ]
          then
            _process "→ removing symlink ${symLinkFilePath}"
            rm ${symLinkFilePath}
          fi
        else
          # _process "→ Linking ${links[$index]}"
          # Remove any existing symlinks before making a new one. The default behaviour
          # where the link is a dir is to create the link inside the dir if it exists,
          # resulting in the link being created in our real folder on the second pass.
          # It is possible to use flags '-n' and '-T' here, but just removing the link
          # first makes more sense, I think.

          if [ -f ${symLinkFilePath} ]
          then
            _process "→ removing symlink ${symLinkFilePath}"
            rm ${symLinkFilePath}
          fi
          _process "→ creating link "${DOTFILES_DIR}/${configFilePath}" "${symLinkFilePath}""
          ln -fsnT "${DOTFILES_DIR}/${configFilePath}" "${symLinkFilePath}"
        fi
			done
			# set separater back to carriage return & new line break
			IFS=$'\r\n'
		done
		# Reset IFS back
		IFS=$OIFS
		# source "${HOME}/.bash_profile"
		[ -f ${HOME}/.zshenv ] && source "${HOME}/.zshenv"
    exec zsh
		[[ $? ]] && _success "All files have been copied"
	fi
}

install_homebrew() {
	_process "→ Installing Homebrew"
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

	_process "→ Running brew doctor"
	brew doctor
	[[ $? ]] &&
		_success "Installed Homebrew"
}

install_node() {
	if ! type -P 'npm' &>/dev/null; then
		_process "→ Installing node"

		curl https://www.npmjs.org/install.sh | sh

		[[ $? ]] &&
			_success "Installed npm"
	fi
}

install_arch_dependencies() {
  source installDeps.sh
}

install_formulae() {
	if ! type -P 'brew' &>/dev/null; then
		_error "Homebrew not found"
	else
		_process "→ Installing Homebrew packages"

		# Set variable for list of homebrew formulaes
		brews="${DOTFILES_DIR}/opt/homebrew"

		# Update and upgrade all packages
		_process "→ Updating and upgrading Homebrew packages"
		brew update
		brew upgrade

		# Tap some necessary formulae
		brew tap homebrew/cask-versions
		brew tap homebrew/cask-drivers
		brew tap vitorgalvao/tiny-scripts

		# Store IFS within a temp variable
		OIFS=$IFS

		# Set the separator to a carriage return & a new line break
		# read in passed-in file and store as an array
		IFS=$'\r\n' formulae=($(cat "${brews}"))

		# Loop through split list of formulae
		_process "→ Checking status of desired Homebrew formulae"
		for index in ${!formulae[*]}; do
			# Test whether a Homebrew formula is already installed
			if ! brew list ${formulae[$index]} &>/dev/null; then
				brew install ${formulae[$index]}
			fi
		done

		# Reset IFS back
		IFS=$OIFS

		brew cleanup

		[[ $? ]] && _success "All Homebrew packages installed and updated"
	fi
}

setup_git_authorship() {
	GIT_AUTHOR_NAME=eval "git config user.name"
	GIT_AUTHOR_EMAIL=eval "git config user.email"

	if [[ ! -z "$GIT_AUTHOR_NAME" ]]; then
		_process "→ Setting up Git author"

		read USER_GIT_AUTHOR_NAME
		if [[ ! -z "$USER_GIT_AUTHOR_NAME" ]]; then
			GIT_AUTHOR_NAME="${USER_GIT_AUTHOR_NAME}"
			$(git config --global user.name "$GIT_AUTHOR_NAME")
		else
			_warning "No Git user name has been set.  Please update manually"
		fi

		read USER_GIT_AUTHOR_EMAIL
		if [[ ! -z "$USER_GIT_AUTHOR_EMAIL" ]]; then
			GIT_AUTHOR_EMAIL="${USER_GIT_AUTHOR_EMAIL}"
			$(git config --global user.email "$GIT_AUTHOR_EMAIL")
		else
			_warning "No Git user email has been set.  Please update manually"
		fi
	else
		_process "→ Git author already set, moving on..."
	fi
}

# If no flags are passed, run the dowload, unlink, link and install-dependencies functions.
# Then return (other flags will be false anyway, but I think returning here is more robust)
# If a flag or flags are set, 'runall' should be false, so other functions should run as
# expected.
# N.B. Some of the functions, e.g. the node install and homebrew functions are not called
# at all. 
install() {
  if [ "$runall" == true ]; then
	  _process "→ run all install functions"
    download_dotfiles_with_git
    link_dotfiles true
    install_arch_dependencies
    _process "→ dotfiles downloaded and linked"
    return
  fi

  if [ "$download" == true ]; then
    echo "download dotfiles here"
    download_dotfiles_with_git
  fi
  if [ "$unlink" == true ]; then
    echo "unlink dotfiles"
    link_dotfiles false
  fi
  if [ "$link" == true ]; then
    echo "link dotfiles"
    link_dotfiles true
  fi
  if [ "$install" == true ]; then
    echo "install deps"
    install_arch_dependencies
  fi
}

install

